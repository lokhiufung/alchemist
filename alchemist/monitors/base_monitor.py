from abc import ABC, abstractmethod
from datetime import datetime


class BaseMonitor(ABC):

    @abstractmethod
    def log_signal(
        self,
        strategy_name: str,
        ts: datetime,
        signal_name: str,
        value: float,
    ):
        """
        Logs a signal generated by the strategy.

        :param strategy_name: The name of the strategy generating the signal.
        :param ts: The ts when the signal was generated.
        :param signal_name: The name or type of the signal (e.g., 'RSI', 'VWAP').
        :param value: The value of the signal (e.g., RSI value, price level).
        """
        pass

    @abstractmethod
    def log_trade(
            self,
            strategy_name: str,
            ts: datetime,
            oid: str,
            pdt: str,
            filled_price: float,
            filled_size: float,
            side: str,
        ):

        """
        Logs a trade executed by the strategy.

        :param strategy_name: The name of the strategy executing the trade.
        :param ts: The ts when the trade occurred.
        :param product: The product being traded (e.g., 'AAPL', 'ES').
        :param size: The size of the trade (e.g., number of contracts or shares).
        :param price: The price at which the trade was executed.
        :param side: The side of the trade (e.g., 'BUY' or 'SELL').
        """
        pass

    @abstractmethod
    def log_order(
        self,
        strategy_name: str,
        ts: datetime,
        oid: str,
        order_type: str,
        time_in_force: str,
        pdt: str,
        status: str,
        size: float,
        price: float,
        side: str,
    ):
        """
        Logs an order placed by the strategy.

        :param strategy_name: The name of the strategy placing the order.
        :param ts: The ts when the order was placed.
        :param order_id: A unique identifier for the order.
        :param order_type: The type of order (e.g., 'market', 'limit').
        :param pdt: The product associated with the order (e.g., 'AAPL', 'ES').
        :param status: The current status of the order (e.g., 'PENDING', 'FILLED').
        :param size: The size of the order (e.g., number of contracts or shares).
        :param price: The price associated with the order.
        :param side: The side of the order (e.g., 'BUY' or 'SELL').
        """
        pass

    @abstractmethod
    def log_position(
        self,
        strategy_name: str,
        ts: datetime,
        pdt: str,
        size: float,
        side: str,
        avg_price: float,
        realized_pnl: float,
        unrealized_pnl: float,
    ):
        """
        Logs a position update for the strategy.

        :param strategy_name: The name of the strategy managing the position.
        :param ts: The ts when the position was updated.
        :param product: The product associated with the position (e.g., 'AAPL', 'ES').
        :param size: The size of the position (positive for long, negative for short).
        :param avg_price: The average price of the position.
        :param realized_pnl: (Optional) The realized profit and loss for the position.
        :param unrealized_pnl: (Optional) The unrealized profit and loss for the position.
        """
        pass

    @abstractmethod
    def log_portfolio(
        self,
        strategy_name: str,
        ts: datetime,
        balance: float,
        margin_used: float,
        total_value: float,
    ):
        """
        Logs portfolio-level metrics for the strategy.

        :param strategy_name: The name of the strategy managing the portfolio.
        :param ts: The ts when the portfolio values were updated.
        :param balance: The balance of the portfolio (e.g., cash balance).
        :param margin_used: The margin used in the portfolio.
        :param total_value: The total value of the portfolio, including cash and positions.
        """
        pass